#!/usr/bin/env bash

# Filename:      vim2html
# Description:   Convert source code to html using vim
# Maintainer:    Jeremy Cantrell <jmcantrell@gmail.com>
# Last Modified: Tue 2010-11-30 00:28:55 (-0500)

# Vim is really good at recognizing filetypes and highlighting the syntax in a
# myriad of colorschemes. Vim is also good at turning that highlighted code
# into HTML. The only missing piece was making this process parameter driven
# and scriptable. That's what this script is intended to solve.

# IMPORTS {{{1

source bashful-files
source bashful-input
source bashful-messages
source bashful-modes

# VARIABLES {{{1

SCRIPT_NAME=$(basename "$0" .sh)
SCRIPT_ARGUMENTS="INPUT [OUTPUT]"
SCRIPT_USAGE="Convert source code to html using vim."
SCRIPT_OPTIONS="
-t FILETYPE       Use FILETYPE as vim filetype.
-c COLORSCHEME    Use COLORSCHEME as vim colorscheme.
-n                Output line numbers.
-f                Allow folds.
-l                Use light background.
-T                Use tidy to cleanup HTML.
"

VIM_CMD="vim -n -N"
COLORSCHEME=inkpot
BACKGROUND=dark
VIM_HOME=$(listdir /usr/share/vim -type d -name "vim*" | sort -r | head -n1)

interactive ${INTERACTIVE:-0}
verbose     ${VERBOSE:-0}

# COMMAND-LINE OPTIONS {{{1

unset OPTIND
while getopts ":hifvqf:nt:c:lT" option; do
    case $option in
        t) FILETYPE=$OPTARG ;;
        c) COLORSCHEME=$OPTARG ;;
        n) NUMBERED=1 ;;
        f) FOLDING=1 ;;
        l) BACKGROUND=light ;;
        T) TIDY=1 ;;

        i) interactive 1 ;;
        f) interactive 0 ;;

        v) verbose 1 ;;
        q) verbose 0 ;;

        h) usage 0 ;;
        *) usage 1 ;;
    esac
done && shift $(($OPTIND - 1))

# ERROR CHECKING {{{1

[[ $VIM_HOME ]] || die "Could not find Vim home directory."

INFILE=$1

if [[ ! $INFILE ]]; then
    die "Input file not provided."
fi

if [[ ! -f $INFILE ]]; then
    die "Input file does not exist or is not a regular file."
fi

OUTFILE=$2

if [[ ! $OUTFILE ]]; then
    OUTFILE=${INFILE##*/}.html
fi

if [[ -f $OUTFILE ]]; then
    question -c -p "Overwrite '$OUTFILE'?" || exit 1
fi

# BUILD CONVERSION SCRIPT {{{1

tempfile || exit 1

: >$TEMPFILE

cat >>$TEMPFILE<<-EOF
syntax on
set t_Co=256
set expandtabs
set tabstop=4
set background=$BACKGROUND
let g:html_use_css = 1
EOF

{
    if [[ $FOLDING ]]; then
        echo "set foldmethod=marker"
        echo "let g:html_dynamic_folds = 1"
    else
        echo "let g:html_ignore_folding = 1"
    fi

    [[ $FILETYPE ]] && echo "set ft=$FILETYPE"

    if [[ $NUMBERED ]]; then
        echo "set number"
    else
        echo "set nonumber"
    fi

    [[ $COLORSCHEME ]] && echo "colorscheme $COLORSCHEME"

} >>$TEMPFILE

cat >>$TEMPFILE<<-EOF
TOhtml
w! $OUTFILE
qa!
EOF
#}}}

info -c "Converting file '$INFILE' to '$OUTFILE'..."
$VIM_CMD -S "$TEMPFILE" "$INFILE" >/dev/null 2>&1
sed -i "s%<title>.*</title>%<title>$(basename "$INFILE")</title>%" "$OUTFILE"

if [[ $TIDY ]]; then
    info -c "Cleaning HTML file '$OUTFILE'..."
    tidy --tidy-mark no -utf8 -f /dev/null -clean -asxhtml -o "$OUTFILE" "$OUTFILE"
fi
